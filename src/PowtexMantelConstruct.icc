// The Powtex version of the Jalousie detector
// adaptation of the original code written for the Dream version of the Jalousie detector
// Written by Irina Stefanescu, ESS DG


  G4cout<<"   "<<G4endl;
  G4cout<<" *******The Powtex Mantel detector*******"<<G4endl;
  G4cout<<"   "<<G4endl;
  G4cout<<"   "<<G4endl;

  G4double s_angle = 1.2;   /* solid angle covered by the segment+shielding */

  G4double Aly1 = 1719.2/2*mm; 
  G4double Aly2 = 2316/2*mm;  
  G4double Alz = 255/2*mm;
  G4double Alx1 = 15.2/2*mm;
  G4double Alx2 = 22.8/2*mm;
  
  G4double theta_y = atan((Aly2-Aly1)/2/Alz);   //angle in rad
  G4double theta_x = atan((Alx2-Alx1)/2/Alz);   //angle in rad

  G4cout<<"angle wings segment theta_y [deg]= "<<theta_y*180/M_PI<<G4endl;
  G4cout<<"angle tapering segment theta_x [deg]= "<<theta_x*180/M_PI<<G4endl;

  G4double By1 = Aly1 - Althick/cos(theta_y);
  G4double Bz = Alz - Althick;
  G4double Bx1 = Alx1 - Althick/cos(theta_x);

  G4double By2 = Aly2 - Althick/cos(theta_y);
  G4double Bx2 = Alx2 - Althick/cos(theta_x);

  G4double Gz = Bz - Bthick;

  G4double Gy1 = By1 - Bthick/cos(theta_y);
  G4double Gx1 = Bx1 - Bthick/cos(theta_x);

  G4double Gy2 = By2 - Bthick/cos(theta_y);
  G4double Gx2 = Bx2 - Bthick/cos(theta_x);

  G4cout<<"tan(dthetaM) [rad] = "<<tan(dthetaM)<<G4endl;
  G4cout<<"sin(theta_x) [rad] = "<<sin(theta_x)<<G4endl;
  G4cout<<"tan(theta_x) [rad] = "<<tan(theta_x)<<G4endl;
  G4cout<<" "<<G4endl;

  G4cout<<"(neutron path through Al Haube for tilt_theta = 0 deg): Althick/sin(theta_x) [mm] = "<<Althick/sin(theta_x)<<G4endl;
  G4cout<<"Althick/cos(theta_x) [mm] = "<<Althick/cos(theta_x)<<G4endl;
  G4cout<<" "<<G4endl;
  G4cout<<"(neutron path through Al Cathode): Althick/sin(tilt_theta) [mm] = "<<Althick/sin(tilt_theta*deg)<<G4endl;
  G4cout<<"Althick/cos(tilt_theta) [mm] = "<<Althick/cos(tilt_theta*deg)<<G4endl;
  G4cout<<" "<<G4endl;
  G4cout<<"(neutron path through Al Haube: Althick/sin(theta_x+tilt_theta) [mm] = "<<Althick/sin(theta_x + tilt_theta*deg)<<G4endl;
  G4cout<<"Althick/cos(theta_x+tilt_theta) [mm] = "<<Althick/cos(theta_x + tilt_theta*deg)<<G4endl;
  G4cout<<" "<<G4endl;

  
  G4cout<<"(neutron path through B Haube at tilt_theta = 0 deg): Bthick/sin(theta_x) [mm] = "<<Bthick/sin(theta_x)<<G4endl;
  G4cout<<"Bthick/cos(theta_x) [mm] = "<<Bthick/cos(theta_x)<<G4endl;
  G4cout<<" "<<G4endl;
  G4cout<<"Bthick/cos(theta_x + tilt_theta) [mm] = "<<Bthick/cos(theta_x + tilt_theta*deg)<<G4endl;
  G4cout<<"(neutron path through B Haube): Bthick/sin(theta_x + tilt_theta) [mm] = "<<Bthick/sin(theta_x + tilt_theta*deg)<<G4endl;
  G4cout<<" "<<G4endl;
  G4cout<<"Bthick/cos(tilt_theta) [mm] = "<<Bthick/cos(tilt_theta*deg)<<G4endl;
  G4cout<<"(neutron path through B Cathode): Bthick/sin(angle) [mm] = "<<Bthick/sin(tilt_theta*deg)<<G4endl;
  G4cout<<" "<<G4endl;

  G4cout<<"Gx1 [mm] = "<<Gx1<<G4endl;
  G4cout<<"Gx2 [mm] = "<<Gx2<<G4endl;
  G4cout<<"Gy1 [mm] = "<<Gy1<<G4endl;
  G4cout<<"Gy2 [mm] = "<<Gy2<<G4endl;
  G4cout<<"Gz [mm] = "<<Gz<<G4endl;
  G4cout<<"         "<<G4endl;

  G4double CathSubstrY1 = By1 - margin;
  G4double CathSubstrY2 = By2 - margin;
  G4double CathSubstrZ = Bz - marginz;

  G4double CathConvY1 = CathSubstrY1;
  G4double CathConvY2 = CathSubstrY2;
  G4double CathConvZ = CathSubstrZ;

  rotGL->rotateY(90.*deg);

  T14t = G4ThreeVector(0.,-Gx1 - CathSubstrX1,0);
  T14b = G4ThreeVector(0.,Gx1 + 2*CathConvX1 + CathSubstrX1,0);

  T14 = G4ThreeVector(0.,0.,0);

// T14h is for killing the coating on the haube (detector wall)

  T14h = G4ThreeVector(Bthick/cos(theta_x + tilt_theta*deg)/2,0.,0.);

  G4Box* Box =new G4Box("Cut", Gz+1*cm,Gx1,10*cm);

  G4Trap* TrdGLleft[195][20];
  G4Trap* TrdGLright[195][20];
  G4VSolid* LayerTopLeft_cut[195][20];
  G4VSolid* LayerTopRight_cut[195][20];
  G4VSolid* LayerBottomLeft_cut[195][20];
  G4VSolid* LayerBottomRight_cut[195][20];

  G4LogicalVolume*  logicTrdGLtopleft[100][20];
  G4LogicalVolume*  logicTrdGLbottomleft[100][20];
  G4LogicalVolume*  logicTrdGLbottomright[100][20];
  G4LogicalVolume*  logicTrdGLtopright[100][20];

  G4double GLx1[100][20],GLx2[100][20],GLy1[100][20];
  G4double GLy2[100][20],GLz[100][20];


  G4double xx1 = (Gx1 - 2*CathConvX1 - 3*CathSubstrX1);
  G4double xx2 = (Gx2 - 2*CathConvX2 - 3*CathSubstrX2);
  G4double ixx = (xx2-xx1)/2/n_wiresM;  // wire pitch
  G4double izz = 2*Gz/n_wiresM - 0.1*mm;      // determined by the wire pitch; subtract am argin of 0.1 mm to avoid overlaps with the housing/coating


  G4cout<<"strip = 1 is in the centre of the segment, strip = 16 is at the edge. "<<G4endl;
  G4cout<<"wire = 1 is closest to the sample, wire =16 is closest to the shielding. "<<G4endl;
  G4cout<<"   "<<G4endl;
  G4cout<<"depth of a voxel (izz) is "<<izz*mm<<G4endl;
  G4cout<<"   "<<G4endl;

  // create the gas voxels (volumes)


  for (G4int i=1; i<=n_stripsM/2; i++){  //loop over 1/2*strips

  	for (G4int j=1; j<=n_wiresM; j++){  // loop over all 32 wires

	     GLz[i][j] = izz/2;
  	   GLy1[i][j] = xx1 + (j-1)*ixx;  //will become voxel front width after rotation
  	   GLy2[i][j] = xx1 + j*ixx;     //will become voxel front width after rotation
  	   GLx1[i][j] = (dist_det + (j-1)*izz)*(tan(i*dthetaM) - tan((i-1)*dthetaM));  // will become voxel front height after rotation
  	   GLx2[i][j] = (dist_det + j*izz)*(tan(i*dthetaM) - tan((i-1)*dthetaM));  // will become voxel back height after rotation

//	   G4cout<<"GLx1["<<i<<","<<j<<"]="<<GLx1[i][j]*mm<<"   GLx2["<<i<<","<<j<<"]="<<GLx2[i][j]*mm<<"  GLy1["<<i<<","<<j<<"]="<<GLy1[i][j]*mm<<"   GLy2["<<i<<","<<j<<"]="<<GLy2[i][j]*mm<<G4endl;
//	   G4cout<<"         "<<G4endl;


	 TrdGLleft[i][j] = new G4Trap("Gas Layers", GLz[i][j],-i*dthetaM,0.,GLy1[i][j],GLx1[i][j]/2,GLx1[i][j]/2,0.,GLy2[i][j],GLx2[i][j]/2,GLx2[i][j]/2,0.);
	 TrdGLright[i][j] = new G4Trap("Gas Layers", GLz[i][j],i*dthetaM,0.,GLy1[i][j],GLx1[i][j]/2,GLx1[i][j]/2,0.,GLy2[i][j],GLx2[i][j]/2,GLx2[i][j]/2,0.);

  	 LayerTopLeft_cut[i][j] = new G4SubtractionSolid("L-B", TrdGLleft[i][j], Box, rotTa, T14t);
  	 LayerTopRight_cut[i][j] = new G4SubtractionSolid("L-B", TrdGLright[i][j], Box, rotTa, T14t);
  	 LayerBottomLeft_cut[i][j] = new G4SubtractionSolid("L-B", TrdGLleft[i][j], Box, rotTa, T14b);
  	 LayerBottomRight_cut[i][j] = new G4SubtractionSolid("L-B", TrdGLright[i][j], Box, rotTa, T14b);

	 logicTrdGLtopleft[i][j] = new G4LogicalVolume(LayerTopLeft_cut[i][j], gas_mat, "GasLayer_TL_M");
	 logicTrdGLbottomleft[i][j] = new G4LogicalVolume(LayerBottomLeft_cut[i][j], gas_mat, "GasLayer_BL_M");
	 logicTrdGLtopright[i][j] = new G4LogicalVolume(LayerTopRight_cut[i][j], gas_mat, "GasLayer_TR_M");
	 logicTrdGLbottomright[i][j] = new G4LogicalVolume(LayerBottomRight_cut[i][j], gas_mat, "GasLayer_BR_M");

// comment: after the 90-deg rotation of the segment top becomes "left" and bottom becomes "right"
     logicTrdGLtopleft[i][j]->SetVisAttributes(green);
     logicTrdGLbottomleft[i][j]->SetVisAttributes(brown);
     logicTrdGLtopright[i][j]->SetVisAttributes(cyan); //green
     logicTrdGLbottomright[i][j]->SetVisAttributes(black);  //brown


   }

  }

  G4VSolid* Trd1 = new G4Trd("Al Box", Alx1,Alx2,Aly1,Aly2,Alz);
  G4VSolid* Trd2 = new G4Trd("B Box", Bx1,Bx2,By1,By2,Bz);
  G4VSolid* Trd3 = new G4Trd("Gas Box", Gx1,Gx2,Gy1,Gy2,Gz);
  G4VSolid* Trd4 = new G4Trd("Cathode Substrate", CathSubstrX1,CathSubstrX2,CathSubstrY1,CathSubstrY2,CathSubstrZ);
  G4VSolid* Trd5 = new G4Trd("Cathode Converter C1", CathConvX1,CathConvX2,CathConvY1,CathConvY2,CathConvZ);
  G4VSolid* Trd6 = new G4Trd("Cathode Converter C2", CathConvX1,CathConvX2,CathConvY1,CathConvY2,CathConvZ);

//  G4VSolid* Trd35 = new G4SubtractionSolid("G-C1SC2", Trd3, Trd456, rotTa, T14);

  G4VSolid* Bshield = new G4Trd("Shield Box", Alx2,Alx2,Aly2,Aly2,shieldz);  /* Boron shielding at the back */


// coating on both detector walls

  G4VSolid* Trd23 = new G4SubtractionSolid("B-G", Trd2, Trd3, rotTa, T14);

  G4VSolid* Trd12 = new G4SubtractionSolid("Al-B", Trd1, Trd2, rotTa, T14);//  

  logicTrdAl = new G4LogicalVolume(Trd12, haube_mat, "Substrate Haube");
  logicTrdB = new G4LogicalVolume(Trd23, conv_mat, "Converter Haube");

  logicTrdCathodeC1 = new G4LogicalVolume(Trd5, conv_mat, "Converter Cathode1");
  logicTrdCathodeC2 = new G4LogicalVolume(Trd6, conv_mat, "Converter Cathode2");

  logicTrdCathodeS = new G4LogicalVolume(Trd4, haube_mat, "Substrate Cathode");
  logicBShield = new G4LogicalVolume(Bshield, nconv_mat, "Shielding");

// assembly the segment housing: Al haube + Haube Coating + cathode substrate + coating cathode left and right

 G4AssemblyVolume* assemblySegment = new G4AssemblyVolume();
 G4AssemblyVolume* assemblyModule = new G4AssemblyVolume();

  rotT13->rotateY(90.*deg);
  rotT13->rotateX(90.*deg);

 Th.setX(Alz);Th.setY(0.);Th.setZ(0.);
 ThC1.setX(Alz);ThC1.setZ(0.);ThC1.setY(CathSubstrX1+CathConvX1);
 ThC2.setX(Alz);ThC2.setZ(0.);ThC2.setY(-(CathSubstrX1+CathConvX1));


 assemblySegment->AddPlacedVolume(logicTrdAl,Th,rotT13);
 assemblySegment->AddPlacedVolume(logicTrdB,Th,rotT13);
 assemblySegment->AddPlacedVolume(logicTrdCathodeC1,ThC1,rotT13);
 assemblySegment->AddPlacedVolume(logicTrdCathodeC2,ThC2,rotT13);
 assemblySegment->AddPlacedVolume(logicTrdCathodeS,Th,rotT13);

 Th.setX(2*Alz + shieldz);Th.setY(0.);Th.setZ(0.);

 assemblySegment->AddPlacedVolume(logicBShield,Th,rotT13);

 G4double voxelYd = 4*CathConvX1 + 2*CathSubstrX1; // push up or down the gas voxels to avoid overlap with the cathode components
 G4double voxelYu = 2*CathConvX1 + 2*CathSubstrX1; // push up or down the gas voxels to avoid overlap with the cathode components

 G4cout<<"   "<<G4endl;

 for (G4int j=1; j<=n_wiresM; j++){

        voxelZZM[1][j] = 0.5*GLx2[1][j];   // in theta
        voxelYYM[j] = (GLy1[1][j] + GLy2[1][j]);     // not used!, used Yd and Yu instead see definitions above
		voxelXXM[j] = Althick + Bthick + (j-1)*izz + izz/2; // segment depth

//	G4cout<<"voxelYY["<<j<<"]="<<voxelYY[j]<<",  voxelXX["<<j<<"]="<<voxelXX[j]<<G4endl;

	}

 G4cout<<"   "<<G4endl;

 for (G4int j=1; j<=n_wiresM; j++){

	  for (G4int voxel=1; voxel<n_stripsM/2; voxel++){

       voxelZZM[voxel+1][j] = voxelZZM[voxel][j] + GLx2[voxel+1][j];

//	     G4cout<<"voxelZZ["<<voxel<<"]["<<j<<"]="<<voxelZZ[voxel][j]<<G4endl;


	     }
   }

 G4cout<<"   "<<G4endl;

// place the gas voxels inside the segment

 for (G4int voxel=1; voxel<=n_stripsM/2; voxel++){     //voxel<=32, 1/2 no of strips

 	for (G4int j=1; j<=n_wiresM; j++){  //n_wiresM

	         TGL.setX(voxelXXM[j]);  //depth
	         TGL.setY(voxelYu);TGL.setZ(voxelZZM[voxel][j]);

		 assemblySegment->AddPlacedVolume(logicTrdGLtopleft[voxel][j],TGL,rotGL); // top left


	         TGL.setY(-voxelYd);TGL.setZ(voxelZZM[voxel][j]);

		 assemblySegment->AddPlacedVolume(logicTrdGLbottomleft[voxel][j],TGL,rotGL);	// bottom left


	         TGL.setY(voxelYu);TGL.setZ(-voxelZZM[voxel][j]);

		 assemblySegment->AddPlacedVolume(logicTrdGLtopright[voxel][j],TGL,rotGL);	//top right


	         TGL.setY(-voxelYd);TGL.setZ(-voxelZZM[voxel][j]);

		 assemblySegment->AddPlacedVolume(logicTrdGLbottomright[voxel][j],TGL,rotGL);	//bottom right

	  	}

  }
  
// calculate the solid angle covered by the segment  

 G4double distY_seg = 2*GLy1[1][n_wiresM]+ 4*(Althick + Bthick) + voxelYd;

 G4cout<<"distY_seg (mm) = "<<distY_seg*mm<<G4endl;

 G4double seg_middle = dist_det + Alz + shieldz;
 G4cout<<"seg_middle (mm) = "<<seg_middle*mm<<G4endl;

 G4double st_angle = asin((distY_seg + seg_dist)/seg_middle)*180/M_PI;    // Alz and shieldz are already 'halved' when defined; added 5 mm on each side of the segment

 G4cout<<"solid angle covered by a segment is = "<<st_angle<<G4endl;
 G4cout<<" "<<G4endl;

// position the detector segments around the sample in cylindrical geometry

 for (G4int copyNoZ=1; copyNoZ<=nM; copyNoZ++){

		segX[copyNoZ] = dist_det*cos((copyNoZ-1)*st_angle*M_PI/180);

 		segY[copyNoZ] = dist_det*sin((copyNoZ-1)*st_angle*M_PI/180);

//		G4cout<<"segX["<<copyNoZ<<"] = "<<segX[copyNoZ]<<", segY["<<copyNoZ<<"] = "<<segY[copyNoZ]<<G4endl;

 		Ts.setX(segX[copyNoZ]);

		Ts.setY(segY[copyNoZ]); 
		
		Ts.setZ(0.);

	    G4RotationMatrix* Rsa = new G4RotationMatrix();

		Rsa->rotateZ(((copyNoZ-1)*st_angle - tilt_theta)*deg);  

 		assemblyModule->AddPlacedAssembly(assemblySegment,Ts,Rsa);

	}


// G4double init_angle = 0.; // -90 for the event file

// position the detector modules around the sample

 for (G4int copyMod=1; copyMod<=no_modulesM; copyMod++){
 
	    G4RotationMatrix* Rsb = new G4RotationMatrix();
		Rsb->rotateZ(-((copyMod-1)*nM*st_angle)*deg + init_angleM*deg);

		Tsm.setX(0.);  
		Tsm.setY(0.);  
		Tsm.setZ(0.);  

 	    assemblyModule->MakeImprint(logicWorld,Tsm,Rsb,copyMod,false);

	}


// generate lookup table voxel positions to correct the TOF

 oFile = fopen("LookupTablePowtex.txt","a");


// top left strips

 for (G4int md=1; md<=no_modulesM; md++){

    G4double angM = -(md-1)*(nM*st_angle) + init_angleM;

	G4double mZ_s = sin(angM*M_PI/180);
	G4double mZ_c = cos(angM*M_PI/180);

/*	G4cout<<"  "<<G4endl;
	G4cout<<"angM for mod "<<md<<" = "<<angM<<G4endl;
	G4cout<<"mZ_s ="<<mZ_s<<G4endl;
	G4cout<<"mZ_c ="<<mZ_c<<G4endl;
	G4cout<<"  "<<G4endl;*/

	 for (G4int i=1; i<=nM; i++){

		    G4double ang = (i-1)*st_angle - tilt_theta;

			G4double segZ_s = sin(ang*M_PI/180);
		    G4double segZ_c = cos(ang*M_PI/180);

/*		    G4cout<<"ang for seg "<<i<<" = "<<ang<<G4endl;
	        G4cout<<"segZ_s ="<<segZ_s<<G4endl;
	        G4cout<<"segZ_c ="<<segZ_c<<G4endl;
	        G4cout<<" "<<G4endl;*/

		 for (G4int j=1; j<=n_wiresM; j++){

			 for (G4int k=1; k<=n_stripsM/2; k++){

			 // rotation individual segments around Z with ang

				 sxM[100*md+i][j][k] = segX[i] + voxelXXM[j]*segZ_c - (-voxelYYM[j]*0.25-0*voxelYu)*segZ_s;
				 syM[100*md+i][j][k] = segY[i] + voxelXXM[j]*segZ_s + (-voxelYYM[j]*0.25-0*voxelYu)*segZ_c;
				 szM[100*md+i][j][k] =  voxelZZM[k][j];
				 
			 // rotation modules around Z with angM
			 
				 VXM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_c - syM[100*md+i][j][k]*mZ_s;
				 VYM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_s + syM[100*md+i][j][k]*mZ_c;
				 VZM[100*md+i][j][k] = szM[100*md+i][j][k];
	     			 

				if (oFile!=NULL){
	    		     		 fprintf(oFile,outform2,7,1,100*md+i,j,k,1,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k]);
	    		     		 
//	    		     		 fprintf(oFile,outform3,7,1,100*md+i,j,k,1,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k],
//	    		     		 -k*dthetaM,GLx1[k][j]*mm,GLx2[k][j]*mm,2*GLy1[k][j]*mm,2*GLy2[k][j]*mm,2*GLz[k][j]*mm);
			 	}
			 	
			}


	         }
	}
}

G4cout<<"....writing out the top left voxel info done!"<<G4endl;

// top right


 for (G4int md=1; md<=no_modulesM; md++){

    G4double angM = -(md-1)*(nM*st_angle) + init_angleM;

	G4double mZ_s = sin(angM*M_PI/180);
	G4double mZ_c = cos(angM*M_PI/180);

	 for (G4int i=1; i<=nM; i++){

		    G4double ang = (i-1)*st_angle - tilt_theta;

			G4double segZ_s = sin(ang*M_PI/180);
		    G4double segZ_c = cos(ang*M_PI/180);


		 for (G4int j=1; j<=n_wiresM; j++){

			 for (G4int k=1; k<=n_stripsM/2; k++){

			 // rotation individual segments around Z with ang

				 sxM[100*md+i][j][k] = segX[i] + voxelXXM[j]*segZ_c - (-voxelYYM[j]*0.25-0*voxelYu)*segZ_s;
				 syM[100*md+i][j][k] = segY[i] + voxelXXM[j]*segZ_s + (-voxelYYM[j]*0.25-0*voxelYu)*segZ_c;
				 szM[100*md+i][j][k] =  - voxelZZM[k][j];

			 // rotation module around Z with angM
			 
				 VXM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_c - syM[100*md+i][j][k]*mZ_s;
				 VYM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_s + syM[100*md+i][j][k]*mZ_c;
				 VZM[100*md+i][j][k] = szM[100*md+i][j][k];

				if (oFile!=NULL){
	    		     		 fprintf(oFile,outform2,7,1,100*md+i,j,k,2,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k]);

//	    		     		 fprintf(oFile,outform3,7,1,100*md+i,j,k,2,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k],
//	    		     		 k*dthetaM,GLx1[k][j]*mm,GLx2[k][j]*mm,2*GLy1[k][j]*mm,2*GLy2[k][j]*mm,2*GLz[k][j]*mm);
			 	}
			 	
			}


	         }
	}
}

G4cout<<"....writing out the top right voxel info done!"<<G4endl;

// bottom left

 for (G4int md=1; md<=no_modulesM; md++){

    G4double angM = -(md-1)*(nM*st_angle) + init_angleM;

	G4double mZ_s = sin(angM*M_PI/180);
	G4double mZ_c = cos(angM*M_PI/180);

	 for (G4int i=1; i<=nM; i++){

		    G4double ang = (i-1)*st_angle - tilt_theta;

			G4double segZ_s = sin(ang*M_PI/180);
		    G4double segZ_c = cos(ang*M_PI/180);

		 for (G4int j=1; j<=n_wiresM; j++){

			 for (G4int k=1; k<=n_stripsM/2; k++){

			 // rotation individual segments around Z with ang

				 sxM[100*md+i][j][k] = segX[i] + voxelXXM[j]*segZ_c - (voxelYYM[j]*0.25 - 0*voxelYd)*segZ_s;
				 syM[100*md+i][j][k] = segY[i] + voxelXXM[j]*segZ_s + (voxelYYM[j]*0.25 - 0*voxelYd)*segZ_c;
				 szM[100*md+i][j][k] =  voxelZZM[k][j];

			 // rotation individual segments around Z with angM
			 
				 VXM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_c - syM[100*md+i][j][k]*mZ_s;
				 VYM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_s + syM[100*md+i][j][k]*mZ_c;
				 VZM[100*md+i][j][k] = szM[100*md+i][j][k];

				if (oFile!=NULL){
	    		     		 fprintf(oFile,outform2,7,1,100*md+i,j,k,3,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k]);
	    		     		 
//	    		     		 fprintf(oFile,outform3,7,1,100*md+i,j,k,3,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k],
//	    		     		 -k*dthetaM,GLx1[k][j]*mm,GLx2[k][j]*mm,2*GLy1[k][j]*mm,2*GLy2[k][j]*mm,2*GLz[k][j]*mm);
	    		     		 
			 	}
			 	

			}


	         }
	}
}


G4cout<<"....writing out the bottom left voxel info done!"<<G4endl;


// bottom right


 for (G4int md=1; md<=no_modulesM; md++){

    G4double angM = -(md-1)*(nM*st_angle) + init_angleM;

	G4double mZ_s = sin(angM*M_PI/180);
	G4double mZ_c = cos(angM*M_PI/180);

	 for (G4int i=1; i<=nM; i++){

		    G4double ang = (i-1)*st_angle - tilt_theta;

			G4double segZ_s = sin(ang*M_PI/180);
		    G4double segZ_c = cos(ang*M_PI/180);

		 for (G4int j=1; j<=n_wiresM; j++){

			 for (G4int k=1; k<=n_stripsM/2; k++){

			 // rotation individual segments around Z with ang


				 sxM[100*md+i][j][k] = segX[i] + voxelXXM[j]*segZ_c - (voxelYYM[j]*0.25 - 0*voxelYd)*segZ_s;
				 syM[100*md+i][j][k] = segY[i] + voxelXXM[j]*segZ_s + (voxelYYM[j]*0.25 - 0*voxelYd)*segZ_c;
				 szM[100*md+i][j][k] =  - voxelZZM[k][j];

			 // rotation individual segments around Z with angM
			 
				 VXM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_c - syM[100*md+i][j][k]*mZ_s;
				 VYM[100*md+i][j][k] = sxM[100*md+i][j][k]*mZ_s + syM[100*md+i][j][k]*mZ_c;
				 VZM[100*md+i][j][k] = szM[100*md+i][j][k];


				if (oFile!=NULL){
				
 	   		     		 fprintf(oFile,outform2,7,1,100*md+i,j,k,4,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k]);
 	   		     		 
//	    		     	 fprintf(oFile,outform3,7,1,100*md+i,j,k,4,VXM[100*md+i][j][k],VYM[100*md+i][j][k],VZM[100*md+i][j][k],
//	    		     		 k*dthetaM,GLx1[k][j]*mm,GLx2[k][j]*mm,2*GLy1[k][j]*mm,2*GLy2[k][j]*mm,2*GLz[k][j]*mm);
	    		     		 
			 	}
			 	

			}


	         }
	}
}

G4cout<<"....writing out the bottom right voxel info done!"<<G4endl;

  fclose (oFile); 

  TrAlu_vat = new G4VisAttributes(brown);
  TrBor_vat = new G4VisAttributes(red);
  TrBShield_vat = new G4VisAttributes(cyan);
  
  
//  TrBShield_vat->SetForceSolid(true);
//  TrBor_vat->SetForceSolid(false);
//  TrAlu_vat->SetForceSolid(true);
    

  logicTrdB->SetVisAttributes(TrBor_vat);
  logicTrdCathodeC1->SetVisAttributes(TrBor_vat);
  logicTrdCathodeC2->SetVisAttributes(TrBor_vat);
//  logicBoxVoxel->SetVisAttributes(TrBor_vat);
  logicTrdAl->SetVisAttributes(TrAlu_vat);
  logicTrdCathodeS->SetVisAttributes(TrAlu_vat);
  logicBShield->SetVisAttributes(TrBShield_vat);
//  logicTrdGas->SetVisAttributes(TrGL_vat); 




    

 